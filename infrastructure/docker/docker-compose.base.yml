version: '3.8'

# Base Docker Compose configuration
# This file contains common service definitions that are extended by environment-specific files

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17.6-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-betting_platform}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Keycloak Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    restart: unless-stopped
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${KEYCLOAK_DB:-keycloak}
      KC_DB_USERNAME: ${POSTGRES_USER:-postgres}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME:-localhost}
      KC_HTTP_PORT: 8080
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Backend API
  backend:
    build:
      context: ../../backend
      dockerfile: docker/Dockerfile.${BUILD_TARGET:-dev}
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-betting_platform}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: ${KEYCLOAK_REALM:-betting-platform}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID:-betting-api}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:4200}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: ../../frontend
      dockerfile: docker/Dockerfile.${BUILD_TARGET:-dev}
    restart: unless-stopped
    environment:
      API_URL: ${API_URL:-http://localhost:8000}
      KEYCLOAK_URL: ${KEYCLOAK_URL:-http://localhost:8080}
      KEYCLOAK_REALM: ${KEYCLOAK_REALM:-betting-platform}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_FRONTEND_CLIENT_ID:-betting-frontend}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "${FRONTEND_PORT:-4200}:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana (Observability)
  grafana:
    image: grafana/grafana:11.3.0
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_FEATURE_TOGGLES_ENABLE: ${GRAFANA_FEATURE_TOGGLES:-traceqlEditor}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Mimir (Metrics Storage)
  mimir:
    image: grafana/mimir:2.14.1
    restart: unless-stopped
    command: ["-config.file=/etc/mimir/mimir.yaml"]
    ports:
      - "${MIMIR_PORT:-9009}:9009"
    volumes:
      - mimir_data:/data
      - ./observability/mimir/mimir.yaml:/etc/mimir/mimir.yaml:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9009/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Loki (Log Storage)
  loki:
    image: grafana/loki:3.2.0
    restart: unless-stopped
    command: ["-config.file=/etc/loki/loki.yaml"]
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - loki_data:/data
      - ./observability/loki/loki.yaml:/etc/loki/loki.yaml:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Tempo (Trace Storage)
  tempo:
    image: grafana/tempo:2.6.1
    restart: unless-stopped
    command: ["-config.file=/etc/tempo/tempo.yaml"]
    ports:
      - "${TEMPO_PORT:-3200}:3200"
      - "14268:14268"  # Jaeger ingest
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    volumes:
      - tempo_data:/data
      - ./observability/tempo/tempo.yaml:/etc/tempo/tempo.yaml:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3200/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Alloy (Telemetry Collection)
  alloy:
    image: grafana/alloy:1.4.2
    restart: unless-stopped
    command: ["run", "/etc/alloy/config.alloy", "--server.http.listen-addr=0.0.0.0:12345"]
    ports:
      - "${ALLOY_PORT:-12345}:12345"
    volumes:
      - ./observability/alloy/config.alloy:/etc/alloy/config.alloy:ro
    depends_on:
      - mimir
      - loki
      - tempo
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:12345/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  mimir_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local
  backend_logs:
    driver: local

networks:
  default:
    name: betting-platform
    driver: bridge