version: '3.8'

# Development Docker Compose for Betting League Championship
# Simplified setup for backend development and testing

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17.6-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: betting_championship
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - betting-network

  # Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.2
    restart: unless-stopped
    command: start-dev --import-realm
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin123
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres123
      - KC_HOSTNAME=localhost
      - KC_HTTP_PORT=8080
      - KC_HEALTH_ENABLED=true
    ports:
      - "8090:8080"  # Using 8090 to avoid conflict with Adminer
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./keycloak-realm-dev.json:/opt/keycloak/data/import/realm-export.json:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8080/admin/ >/dev/null || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - betting-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile.dev
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/betting_championship
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=betting-platform
      - KEYCLOAK_CLIENT_ID=betting-api
      - SECRET_KEY=dev-secret-key-change-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:4200","http://localhost:8080","http://localhost:8090"]
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - betting-network

  # Adminer (Database Management UI)
  adminer:
    image: adminer:4.8.1
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - betting-network

volumes:
  postgres_data:
    driver: local
  backend_logs:
    driver: local

networks:
  betting-network:
    driver: bridge