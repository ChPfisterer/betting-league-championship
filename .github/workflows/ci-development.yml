name: CI Development

# Global minimal permissions (can be overridden by job-level permissions)
permissions:
  contents: read

on:
  push:
    branches-ignore:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.6
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: betting_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements/dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          if [ -f "requirements/dev.txt" ]; then
            pip install -r requirements/dev.txt
          else
            echo "Dev requirements not found - skipping installation"
            exit 1
          fi

      - name: Run linting
        run: |
          cd backend
          if command -v ruff &> /dev/null; then
            ruff check . || echo "Ruff check completed with warnings"
            black --check . || echo "Black check completed with warnings"
            mypy . || echo "MyPy check completed with warnings"
          else
            echo "Linting tools not available - skipping"
          fi

      - name: Run tests
        run: |
          cd backend
          if command -v pytest &> /dev/null; then
            pytest tests/ -v --tb=short --cov=src --cov-report=xml || echo "Tests completed with issues"
          else
            echo "Pytest not available - skipping tests"
          fi
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/betting_test

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if frontend exists
        id: check-frontend
        run: |
          if [ -f "frontend/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        if: steps.check-frontend.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable npm cache
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          if [ -f "frontend/package-lock.json" ]; then
            echo "NPM_CACHE_ENABLED=true" >> $GITHUB_ENV
          else
            echo "NPM_CACHE_ENABLED=false" >> $GITHUB_ENV
          fi

      - name: Cache npm dependencies
        if: steps.check-frontend.outputs.exists == 'true' && env.NPM_CACHE_ENABLED == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd frontend
          if [ -f "package-lock.json" ]; then
            npm ci
          elif [ -f "package.json" ]; then
            npm install
          else
            echo "No package.json found - skipping npm install"
            exit 1
          fi

      - name: Run linting
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd frontend
          npm run lint

      - name: Run tests
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd frontend
          npm run test:ci

      - name: Build application
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd frontend
          npm run build

      - name: Skip frontend (not yet implemented)
        if: steps.check-frontend.outputs.exists == 'false'
        run: |
          echo "Frontend project not yet implemented - skipping tests"

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'